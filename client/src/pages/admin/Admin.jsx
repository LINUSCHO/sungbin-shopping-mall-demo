import { useState, useEffect } from 'react'
import { Link, useNavigate } from 'react-router-dom'
import { apiGet, apiPost, apiDelete } from '../../lib/api'
import './Admin.css'

function Admin() {
  const navigate = useNavigate()
  const [activeTab, setActiveTab] = useState('dashboard')
  const [products, setProducts] = useState([])
  const [orders, setOrders] = useState([])
  const [loading, setLoading] = useState(false)
  const [ordersLoading, setOrdersLoading] = useState(false)
  const [filters, setFilters] = useState({
    category: '',
    status: '',
    search: ''
  })
  const [orderFilters, setOrderFilters] = useState({
    search: '',
    status: ''
  })

  // ÏÉÅÌíà Îç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò§Í∏∞
  const fetchProducts = async () => {
    setLoading(true)
    try {
      const response = await apiGet('/products/all')
      if (response.success) {
        setProducts(response.data || [])
      }
    } catch (error) {
      console.error('ÏÉÅÌíà Îç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò§Í∏∞ Ïã§Ìå®:', error)
      alert('ÏÉÅÌíà Îç∞Ïù¥ÌÑ∞Î•º Î∂àÎü¨Ïò§ÎäîÎç∞ Ïã§Ìå®ÌñàÏäµÎãàÎã§.')
    } finally {
      setLoading(false)
    }
  }

  // Ï£ºÎ¨∏ Îç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò§Í∏∞
  const fetchOrders = async () => {
    setOrdersLoading(true)
    try {
      const response = await apiGet('/orders')
      console.log('Ï£ºÎ¨∏ API ÏùëÎãµ:', response)
      // API ÏùëÎãµ Íµ¨Ï°∞Ïóê Îî∞Îùº Îç∞Ïù¥ÌÑ∞ ÏÑ§Ï†ï
      if (response.items) {
        setOrders(response.items || [])
      } else if (response.data?.items) {
        setOrders(response.data.items || [])
      } else if (Array.isArray(response)) {
        setOrders(response)
      } else {
        setOrders([])
      }
    } catch (error) {
      console.error('Ï£ºÎ¨∏ Îç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò§Í∏∞ Ïã§Ìå®:', error)
      alert('Ï£ºÎ¨∏ Îç∞Ïù¥ÌÑ∞Î•º Î∂àÎü¨Ïò§ÎäîÎç∞ Ïã§Ìå®ÌñàÏäµÎãàÎã§.')
      setOrders([])
    } finally {
      setOrdersLoading(false)
    }
  }

  // ÏÉÅÌíà ÏÇ≠Ï†ú
  const handleDeleteProduct = async (productId) => {
    if (!confirm('Ï†ïÎßêÎ°ú Ïù¥ ÏÉÅÌíàÏùÑ ÏÇ≠Ï†úÌïòÏãúÍ≤†ÏäµÎãàÍπå?')) {
      return
    }

    try {
      const response = await apiDelete(`/products/${productId}`)
      
      if (response.success) {
        alert('ÏÉÅÌíàÏù¥ ÏÑ±Í≥µÏ†ÅÏúºÎ°ú ÏÇ≠Ï†úÎêòÏóàÏäµÎãàÎã§.')
        fetchProducts() // Î™©Î°ù ÏÉàÎ°úÍ≥†Ïπ®
      } else {
        alert(response.message || 'ÏÉÅÌíà ÏÇ≠Ï†úÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.')
      }
    } catch (error) {
      console.error('ÏÉÅÌíà ÏÇ≠Ï†ú Ïò§Î•ò:', error)
      alert('ÏÉÅÌíà ÏÇ≠Ï†ú Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.')
    }
  }

  // ÏÉÅÌíà ÏàòÏ†ï ÌéòÏù¥ÏßÄÎ°ú Ïù¥Îèô
  const handleEditProduct = (productId) => {
    navigate(`/admin/product/edit/${productId}`)
  }

  // ÌïÑÌÑ∞ÎßÅÎêú ÏÉÅÌíà Î™©Î°ù
  const filteredProducts = products.filter(product => {
    const matchesCategory = !filters.category || product.category === filters.category
    const matchesStatus = !filters.status || 
      (filters.status === 'active' && product.isActive) ||
      (filters.status === 'inactive' && !product.isActive)
    const matchesSearch = !filters.search || 
      product.name.toLowerCase().includes(filters.search.toLowerCase()) ||
      product.sku.toLowerCase().includes(filters.search.toLowerCase())
    
    return matchesCategory && matchesStatus && matchesSearch
  })

  // ÌïÑÌÑ∞ÎßÅÎêú Ï£ºÎ¨∏ Î™©Î°ù
  const filteredOrders = orders.filter(order => {
    const matchesSearch = !orderFilters.search || 
      (order.orderNumber && order.orderNumber.toLowerCase().includes(orderFilters.search.toLowerCase())) ||
      (order.shipping?.receiverName && order.shipping.receiverName.toLowerCase().includes(orderFilters.search.toLowerCase()))
    const matchesStatus = !orderFilters.status || order.status === orderFilters.status
    
    return matchesSearch && matchesStatus
  })

  // ÌÉ≠Ïù¥ ÌôúÏÑ±ÌôîÎê† Îïå Îç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò§Í∏∞
  useEffect(() => {
    if (activeTab === 'products') {
      fetchProducts()
    } else if (activeTab === 'orders') {
      fetchOrders()
    }
  }, [activeTab])

  const summaryCards = [
    {
      title: 'Ï¥ù Îß§Ï∂ú',
      value: '‚Ç©1,258,400',
      change: '+5.4%',
      changeType: 'positive',
      icon: 'üí∞'
    },
    {
      title: 'Ï¥ù Ï£ºÎ¨∏',
      value: '1,280',
      change: '-2.1%',
      changeType: 'negative',
      icon: 'üõí'
    },
    {
      title: 'Ï¥ù ÏÉÅÌíà',
      value: '542',
      change: '+1.2%',
      changeType: 'positive',
      icon: 'üì¶'
    },
    {
      title: 'Ï¥ù Í≥†Í∞ù',
      value: '8,452',
      change: '+10%',
      changeType: 'positive',
      icon: 'üë•'
    }
  ]

  const recentOrders = [
    {
      id: 'ORD001',
      customer: 'ÍπÄÎØºÏ§Ä',
      date: '2024-07-21',
      amount: '150,000Ïõê',
      status: 'ÏôÑÎ£å',
      statusType: 'completed'
    },
    {
      id: 'ORD002',
      customer: 'Ïù¥ÏÑúÏó∞',
      date: '2024-07-21',
      amount: '25,500Ïõê',
      status: 'ÎåÄÍ∏∞Ï§ë',
      statusType: 'pending'
    },
    {
      id: 'ORD003',
      customer: 'Î∞ïÎèÑÏú§',
      date: '2024-07-20',
      amount: '320,750Ïõê',
      status: 'ÏôÑÎ£å',
      statusType: 'completed'
    },
    {
      id: 'ORD004',
      customer: 'ÏµúÏßÄÏö∞',
      date: '2024-07-20',
      amount: '89,900Ïõê',
      status: 'Ï∑®ÏÜåÎê®',
      statusType: 'cancelled'
    },
    {
      id: 'ORD005',
      customer: 'Ï†ïÌïòÏùÄ',
      date: '2024-07-19',
      amount: '512,000Ïõê',
      status: 'ÏôÑÎ£å',
      statusType: 'completed'
    }
  ]

  const renderDashboard = () => (
    <div className="dashboard-content">
      <h1 className="page-title">ÎåÄÏãúÎ≥¥Îìú</h1>
      
      {/* Summary Cards */}
      <div className="summary-cards">
        {summaryCards.map((card, index) => (
          <div key={index} className="summary-card">
            <div className="card-icon">{card.icon}</div>
            <div className="card-content">
              <h3 className="card-title">{card.title}</h3>
              <div className="card-value">{card.value}</div>
              <div className={`card-change ${card.changeType}`}>
                {card.changeType === 'positive' ? '‚ñ≤' : '‚ñº'} {card.change} ÏßÄÎÇú Îã¨ ÎåÄÎπÑ
              </div>
            </div>
          </div>
        ))}
      </div>

      {/* Recent Orders */}
      <div className="recent-orders">
        <h2 className="section-title">ÏµúÍ∑º Ï£ºÎ¨∏</h2>
        <div className="table-container">
          <table className="orders-table">
            <thead>
              <tr>
                <th>Ï£ºÎ¨∏ ID</th>
                <th>Í≥†Í∞ù</th>
                <th>ÎÇ†Ïßú</th>
                <th>Í∏àÏï°</th>
                <th>ÏÉÅÌÉú</th>
              </tr>
            </thead>
            <tbody>
              {recentOrders.map((order, index) => (
                <tr key={index}>
                  <td>{order.id}</td>
                  <td>{order.customer}</td>
                  <td>{order.date}</td>
                  <td>{order.amount}</td>
                  <td>
                    <span className={`status-badge ${order.statusType}`}>
                      {order.status}
                    </span>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>

      {/* Sales Analysis */}
      <div className="sales-analysis">
        <h2 className="section-title">Îß§Ï∂ú Î∂ÑÏÑù</h2>
        <div className="chart-container">
          <div className="bar-chart">
            <div className="bar" style={{ height: '60%' }}></div>
            <div className="bar" style={{ height: '80%' }}></div>
            <div className="bar" style={{ height: '45%' }}></div>
            <div className="bar" style={{ height: '90%' }}></div>
            <div className="bar" style={{ height: '70%' }}></div>
            <div className="bar" style={{ height: '85%' }}></div>
          </div>
        </div>
      </div>
    </div>
  )

  // Ï£ºÎ¨∏ ÏÉÅÌÉúÎ≥Ñ ÏÉâÏÉÅ Ï†ïÏùò
  const getOrderStatusColor = (status) => {
    const colors = {
      created: { bg: '#e3f2fd', color: '#1976d2' },
      pending_payment: { bg: '#fff3e0', color: '#f57c00' },
      paid: { bg: '#e8f5e8', color: '#388e3c' },
      preparing: { bg: '#f3e5f5', color: '#7b1fa2' },
      shipped: { bg: '#e0f2f1', color: '#00796b' },
      delivered: { bg: '#e8f5e8', color: '#2e7d32' },
      completed: { bg: '#e8f5e8', color: '#1b5e20' },
      canceled: { bg: '#ffebee', color: '#d32f2f' },
      refunded: { bg: '#fce4ec', color: '#c2185b' }
    }
    return colors[status] || { bg: '#f5f5f5', color: '#666' }
  }

  // Ï£ºÎ¨∏ ÏÉÅÌÉú ÌïúÍ∏Ä Î≥ÄÌôò
  const getOrderStatusLabel = (status) => {
    const labels = {
      created: 'Ï£ºÎ¨∏ÏôÑÎ£å',
      pending_payment: 'Í≤∞Ï†úÎåÄÍ∏∞',
      paid: 'Í≤∞Ï†úÏôÑÎ£å',
      preparing: 'ÏÉÅÌíàÏ§ÄÎπÑÏ§ë',
      shipped: 'Î∞∞ÏÜ°Ï§ë',
      delivered: 'Î∞∞ÏÜ°ÏôÑÎ£å',
      completed: 'Íµ¨Îß§ÌôïÏ†ï',
      canceled: 'Ï£ºÎ¨∏Ï∑®ÏÜå',
      refunded: 'ÌôòÎ∂àÏôÑÎ£å'
    }
    return labels[status] || status
  }

  // Ï£ºÎ¨∏ ÏÉÅÌÉú Ï†ïÏùò (Admin ÌéòÏù¥ÏßÄÏö© - 7Í∞ÄÏßÄ)
  const ORDER_STATUSES = [
    { key: 'all', label: 'Ï†ÑÏ≤¥', value: null },
    { key: 'created', label: 'Ï£ºÎ¨∏ÌôïÏù∏', value: 'created' },
    { key: 'preparing', label: 'ÏÉÅÌíàÏ§ÄÎπÑÏ§ë', value: 'preparing' },
    { key: 'ready', label: 'Î∞∞ÏÜ°ÏãúÏûë', value: 'ready' },
    { key: 'shipped', label: 'Î∞∞ÏÜ°Ï§ë', value: 'shipped' },
    { key: 'delivered', label: 'Î∞∞ÏÜ°ÏôÑÎ£å', value: 'delivered' },
    { key: 'canceled', label: 'Ï£ºÎ¨∏Ï∑®ÏÜå', value: 'canceled' }
  ]

  const renderOrders = () => (
    <div className="orders-content">
      <div className="orders-header">
        <h1 className="page-title">Ï£ºÎ¨∏ Í¥ÄÎ¶¨</h1>
      </div>
      
      <div className="orders-filters">
        <div className="filter-group" style={{ flex: 1 }}>
          <div className="search-input-wrapper">
            <input 
              type="text" 
              placeholder="Ï£ºÎ¨∏Î≤àÌò∏ ÎòêÎäî Í≥†Í∞ùÎ™Ö Í≤ÄÏÉâ..." 
              className="search-input"
              value={orderFilters.search}
              onChange={(e) => setOrderFilters({...orderFilters, search: e.target.value})}
              onKeyDown={(e) => {
                if (e.key === 'Enter') {
                  e.preventDefault()
                }
              }}
            />
            <button 
              type="button" 
              className="search-btn"
              onClick={() => { /* ÏûÖÎ†•Ìòï ÌïÑÌÑ∞ Ï¶âÏãú Î∞òÏòÅÏù¥Îùº Î≥ÑÎèÑ ÎèôÏûë ÏóÜÏùå */ }}
              title="Í≤ÄÏÉâ"
            >
              üîç Í≤ÄÏÉâ
            </button>
          </div>
        </div>
      </div>

      

      <div className="orders-table-container">
        {ordersLoading ? (
          <div className="loading-container">
            <p>Ï£ºÎ¨∏ Îç∞Ïù¥ÌÑ∞Î•º Î∂àÎü¨Ïò§Îäî Ï§ë...</p>
          </div>
        ) : (
          <table className="orders-table">
            <thead>
              <tr>
                <th>Ï£ºÎ¨∏Î≤àÌò∏</th>
                <th>Í≥†Í∞ùÎ™Ö</th>
                <th>Ï£ºÎ¨∏ÏùºÏãú</th>
                <th>ÏÉÅÌíà</th>
                <th>Í∏àÏï°</th>
                <th>ÏÉÅÌÉú</th>
                <th>Î∞∞ÏÜ°ÏßÄ</th>
                <th>ÏûëÏóÖ</th>
              </tr>
            </thead>
            <tbody>
              {filteredOrders.length === 0 ? (
                <tr>
                  <td colSpan="8" className="no-data">
                    {orders.length === 0 ? 'Îì±Î°ùÎêú Ï£ºÎ¨∏Ïù¥ ÏóÜÏäµÎãàÎã§.' : 'Í≤ÄÏÉâ Ï°∞Í±¥Ïóê ÎßûÎäî Ï£ºÎ¨∏Ïù¥ ÏóÜÏäµÎãàÎã§.'}
                  </td>
                </tr>
              ) : (
                filteredOrders.map((order) => {
                  const statusColor = getOrderStatusColor(order.status)
                  return (
                    <tr key={order._id}>
                      <td>{order.orderNumber || order._id}</td>
                      <td>{order.shipping?.receiverName || '-'}</td>
                      <td>{new Date(order.createdAt).toLocaleString()}</td>
                      <td>
                        <div className="order-items">
                          {order.items?.slice(0, 2).map((item, idx) => (
                            <div key={idx} className="order-item">
                              <img 
                                src={item.product?.image || 'https://via.placeholder.com/30x30?text=IMG'} 
                                alt={item.product?.name}
                                className="item-thumbnail"
                              />
                              <span className="item-name">{item.product?.name}</span>
                              <span className="item-quantity">x{item.quantity}</span>
                            </div>
                          ))}
                          {order.items?.length > 2 && (
                            <div className="more-items">+{order.items.length - 2}Í∞ú Îçî</div>
                          )}
                        </div>
                      </td>
                      <td>‚Ç©{order.total?.toLocaleString()}</td>
                      <td>
                        <span 
                          className="status-badge" 
                          style={{ 
                            background: statusColor.bg, 
                            color: statusColor.color 
                          }}
                        >
                          {getOrderStatusLabel(order.status)}
                        </span>
                      </td>
                      <td>
                        <div className="shipping-info">
                          <div>{order.shipping?.address1}</div>
                          <div className="shipping-phone">{order.shipping?.receiverPhone}</div>
                        </div>
                      </td>
                      <td>
                        <div className="action-buttons">
                          <button 
                            className="btn-view"
                            onClick={() => navigate(`/orders/${order._id}`)}
                          >
                            ÏÉÅÏÑ∏Î≥¥Í∏∞
                          </button>
                        </div>
                      </td>
                    </tr>
                  )
                })
              )}
            </tbody>
          </table>
        )}
      </div>
    </div>
  )

  const renderProducts = () => (
    <div className="products-content">
      <div className="products-header">
        <h1 className="page-title">ÏÉÅÌíà Í¥ÄÎ¶¨</h1>
        <button 
          className="add-product-btn"
          onClick={() => navigate('/admin/product/new')}
        >
          + ÏÉà ÏÉÅÌíà Îì±Î°ù
        </button>
      </div>
      
      <div className="products-stats">
        <div className="stat-card">
          <h3>Ï¥ù ÏÉÅÌíà</h3>
          <p className="stat-number">{products.length}</p>
        </div>
        <div className="stat-card">
          <h3>ÌôúÏÑ± ÏÉÅÌíà</h3>
          <p className="stat-number">{products.filter(p => p.isActive).length}</p>
        </div>
        <div className="stat-card">
          <h3>ÌíàÏ†à ÏÉÅÌíà</h3>
          <p className="stat-number">{products.filter(p => p.stock === 0).length}</p>
        </div>
      </div>

      <div className="products-filters">
        <div className="filter-group">
          <label>Ïπ¥ÌÖåÍ≥†Î¶¨:</label>
          <select 
            className="filter-select"
            value={filters.category}
            onChange={(e) => setFilters({...filters, category: e.target.value})}
          >
            <option value="">Ï†ÑÏ≤¥</option>
            <option value="ÏÉÅÏùò">ÏÉÅÏùò</option>
            <option value="ÌïòÏùò">ÌïòÏùò</option>
            <option value="ÏïÖÏÑ∏ÏÇ¨Î¶¨">ÏïÖÏÑ∏ÏÇ¨Î¶¨</option>
          </select>
        </div>
        <div className="filter-group">
          <label>ÏÉÅÌÉú:</label>
          <select 
            className="filter-select"
            value={filters.status}
            onChange={(e) => setFilters({...filters, status: e.target.value})}
          >
            <option value="">Ï†ÑÏ≤¥</option>
            <option value="active">ÌôúÏÑ±</option>
            <option value="inactive">ÎπÑÌôúÏÑ±</option>
          </select>
        </div>
        <div className="filter-group">
          <input 
            type="text" 
            placeholder="ÏÉÅÌíàÎ™Ö ÎòêÎäî SKU Í≤ÄÏÉâ..." 
            className="search-input"
            value={filters.search}
            onChange={(e) => setFilters({...filters, search: e.target.value})}
          />
        </div>
      </div>

      <div className="products-table-container">
        {loading ? (
          <div className="loading-container">
            <p>ÏÉÅÌíà Îç∞Ïù¥ÌÑ∞Î•º Î∂àÎü¨Ïò§Îäî Ï§ë...</p>
          </div>
        ) : (
          <table className="products-table">
            <thead>
              <tr>
                <th>Ïù¥ÎØ∏ÏßÄ</th>
                <th>ÏÉÅÌíàÎ™Ö</th>
                <th>SKU</th>
                <th>Ïπ¥ÌÖåÍ≥†Î¶¨</th>
                <th>Í∞ÄÍ≤©</th>
                <th>Ïû¨Í≥†</th>
                <th>ÏÉÅÌÉú</th>
                <th>ÏûëÏóÖ</th>
              </tr>
            </thead>
            <tbody>
              {filteredProducts.length === 0 ? (
                <tr>
                  <td colSpan="8" className="no-data">
                    {products.length === 0 ? 'Îì±Î°ùÎêú ÏÉÅÌíàÏù¥ ÏóÜÏäµÎãàÎã§.' : 'Í≤ÄÏÉâ Ï°∞Í±¥Ïóê ÎßûÎäî ÏÉÅÌíàÏù¥ ÏóÜÏäµÎãàÎã§.'}
                  </td>
                </tr>
              ) : (
                filteredProducts.map((product) => (
                  <tr key={product._id}>
                    <td>
                      <div className="product-image">
                        <img 
                          src={product.image || 'https://via.placeholder.com/50x50?text=IMG'} 
                          alt={product.name}
                          onError={(e) => {
                            e.target.src = 'https://via.placeholder.com/50x50?text=IMG'
                          }}
                        />
                      </div>
                    </td>
                    <td>{product.name}</td>
                    <td>{product.sku}</td>
                    <td>{product.category}</td>
                    <td>‚Ç©{product.price?.toLocaleString()}</td>
                    <td>{product.stock}</td>
                    <td>
                      <span className={`status-badge ${product.isActive ? 'active' : 'inactive'}`}>
                        {product.isActive ? 'ÌôúÏÑ±' : 'ÎπÑÌôúÏÑ±'}
                      </span>
                    </td>
                    <td>
                      <div className="action-buttons">
                        <button 
                          className="btn-edit"
                          onClick={() => handleEditProduct(product._id)}
                        >
                          ÏàòÏ†ï
                        </button>
                        <button 
                          className="btn-delete"
                          onClick={() => handleDeleteProduct(product._id)}
                        >
                          ÏÇ≠Ï†ú
                        </button>
                      </div>
                    </td>
                  </tr>
                ))
              )}
            </tbody>
          </table>
        )}
      </div>
    </div>
  )

  const renderContent = () => {
    switch (activeTab) {
      case 'dashboard':
        return renderDashboard()
      case 'orders':
        return renderOrders()
      case 'products':
        return renderProducts()
      case 'customers':
        return <div className="page-content"><h1>Í≥†Í∞ù Í¥ÄÎ¶¨</h1></div>
      default:
        return renderDashboard()
    }
  }

  return (
    <div className="admin-layout">
      {/* Top Bar */}
      <div className="top-bar">
        <h1 className="top-title">Arang</h1>
        <div className="top-actions">
          <button className="action-btn">üì±</button>
          <button className="action-btn">üîÑ</button>
          <button className="action-btn">‚õ∂</button>
        </div>
      </div>

      <div className="admin-container">
        {/* Sidebar */}
        <div className="sidebar">
          <div className="sidebar-header">
            <h2>Í¥ÄÎ¶¨Ïûê Ìå®ÎÑê</h2>
          </div>
          
          <nav className="sidebar-nav">
            <button 
              className={`nav-item ${activeTab === 'dashboard' ? 'active' : ''}`}
              onClick={() => setActiveTab('dashboard')}
            >
              <span className="nav-icon">‚¨ú</span>
              ÎåÄÏãúÎ≥¥Îìú
            </button>
            
            <button 
              className={`nav-item ${activeTab === 'orders' ? 'active' : ''}`}
              onClick={() => setActiveTab('orders')}
            >
              <span className="nav-icon">üõçÔ∏è</span>
              Ï£ºÎ¨∏
            </button>
            
            <button 
              className={`nav-item ${activeTab === 'products' ? 'active' : ''}`}
              onClick={() => setActiveTab('products')}
            >
              <span className="nav-icon">üè∑Ô∏è</span>
              ÏÉÅÌíà
            </button>
            
            <button 
              className={`nav-item ${activeTab === 'customers' ? 'active' : ''}`}
              onClick={() => setActiveTab('customers')}
            >
              <span className="nav-icon">üë•</span>
              Í≥†Í∞ù
            </button>
          </nav>

          <div className="sidebar-footer">
            <Link to="/" className="return-link">
              <span className="nav-icon">üõí</span>
              ÏáºÌïëÎ™∞Î°ú ÎèåÏïÑÍ∞ÄÍ∏∞
              <span className="arrow">‚Üí</span>
            </Link>
          </div>
        </div>

        {/* Main Content */}
        <div className="main-content">
          {renderContent()}
        </div>
      </div>
    </div>
  )
}

export default Admin
